#模块名
app.name = "demo"

akka {
  actor {
    #序列化
    serializers {
      protobuf = "org.ryze.micro.demo.infrastructure.DemoSerializer"
    }
    serialization-bindings {
      "org.ryze.micro.demo.domain.event.Created" = protobuf
      "org.ryze.micro.demo.domain.event.Updated" = protobuf
      "org.ryze.micro.demo.domain.event.Deleted" = protobuf
    }
  }
  cluster {
    #集群角色
    roles      = [${app.name}]
    extensions = ["akka.cluster.metrics.ClusterMetricsExtension", "akka.cluster.pubsub.DistributedPubSub", "akka.cluster.client.ClusterClientReceptionist"]
  }
  #MongoDB持久化插件
  persistence {
    journal.plugin        = "akka-contrib-mongodb-persistence-journal"
    snapshot-store.plugin = "akka-contrib-mongodb-persistence-snapshot"
  }
  #MongoDB持久化插件配置
  contrib.persistence.mongodb.mongo {
    db                   = ${app.name}
    urls                 = ${mongodb.servers}
    jounal-write-concern = "Acknowledged"
  }
}

#事件标签适配器
akka-contrib-mongodb-persistence-journal {
  event-adapters {
    demo = "org.ryze.micro.demo.infrastructure.DemoEventAdapter"
  }
  event-adapter-bindings{
    "org.ryze.micro.demo.domain.event.Created" = demo
    "org.ryze.micro.demo.domain.event.Updated" = demo
    "org.ryze.micro.demo.domain.event.Deleted" = demo
  }
}

mongodb {
  database = ${app.name}
  servers  = ["60.205.106.190:9999"]
}

#MongoDB异步驱动设置
mongo-async-driver {
  akka {
    loggers  = [akka.event.slf4j.Slf4jLogger]
    loglevel = INFO
  }
}